     server creation
--------------------------------

npm init       - create package.json
npm i express  - create node_module and package.lock.json  files  (create express frame work)
                 - to create globally    - npm i express g


server side technology - node  (resolve all request simultaneosly)

  api (the client and server can pass the request through these api)
--------------------  
http request  (request snd in the form of http)

header - contain secret data
body - normal data(passing data) in the form of JSON


   http rqst types
-------------------------------
GET  - to get the  data from db
POST -  create data
PUT  -  complete updation
PATCH - partial updation
DELETE  delete data


  server response status code
-----------------------------------
100 - information passing (alert)
200 - success
300 - redirection
400 - client error
500 - server side error   



     server creation steps
------------------------------------
 1. import express
 2. create app using express
 3. set port number for run the server  in 3000 series
 4. resolve http request 



 Nodemon
 ---------
if we run server using node, recombilation not work
so we use another server , that is Nodemon
 
installed by -   npm i -g nodemon



   TOKEN in server
--------------------------
JWT TOKEN - json web token   --> used for user varification
 install - npm i jsonwebtoken

 library - jsonwebtoken
 method - sign()     method used for generate jwt token

varify() -  used to varify jsonwebtoken

 TOKEN verification
 -------------------------
middlewares : 
    token verification is done by using middlewares
    middlewares have capacity to control server requests

  middlewares is a fn with 3 arguments  : request, response, next

  2 type of middlewares - 
            1. Application specific middlewares - work before all requests
            2. Router specific middlewares  - work which it is to be specifed in requests when it is needed



how to solve runtime error in json
---------------------------------------

try except block :
-------------------
try : error causing code

catch : error solving
    


             mongoDB - database
-----------------------------------
install mongoDB server


  shell commonds
-----------------------
CRUD operations

show dbs              - to see database

use <database_name>   - to open a database

show collections      - to see collections inside the db

db.<collection_name>.find()  - to read all data in collections

db.<collection_name>.findOne({"key":value})   - to read single data

db.<collection_name>.insertOne({"key":value, "key":value,............}) - create new data (only create single data at a time)

 -{mongoDB query operators in my notebook with eg}


 db.<collection_name>.deleteOne({"uname":"anu"})  - used to delete ....single data delete at a time
                            delete count - which show no: of data to be deleted..(if 2 or more anu is here delete all anu)


 db.<collection_name>.updateOne({uname:anu},{$set:{uname:anu v}})  - update data 




SERVER & DATABASE integration
-----------------------------------------------------
database - 27017
server   -3000

mongoose - it is a library which is used for server mdb integration

install  - npm i mongoose

steps for integration:
-------------------------
1. import mongoose
2. state a connection string to integrate
3. define a model for our collections


front-end server integration
-----------------------------------
CORS- cross orgin resource sharing -> library used for front-end server integration
 
front-end - 4000
server    - 3000

steps for integration :
--------------------------------
1. import cors
2. connection string
