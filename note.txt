     server creation
--------------------------------

npm init       - create package.json
npm i express  - create node_module and package.lock.json  files  (create express frame work)
                 - to create globally    - npm i express g


server side technology - node  (resolve all request simultaneosly)

  api (the client and server can pass the request through these api)
--------------------  
http request  (request snd in the form of http)

header - contain secret data
body - normal data(passing data) in the form of JSON


   http rqst types
-------------------------------
GET  - to get the  data from db
POST -  create data
PUT  -  complete updation
PATCH - partial updation
DELETE  delete data


  server response status code
-----------------------------------
100 - information passing (alert)
200 - success
300 - redirection
400 - client error
500 - server side error   



     server creation steps
------------------------------------
 1. import express
 2. create app using express
 3. set port number for run the server  in 3000 series
 4. resolve http request 



 Nodemon
 ---------
if we run server using node, recombilation not work
so we use another server , that is Nodemon
 
installed by -   npm i -g nodemon



   TOKEN in server
--------------------------
JWT TOKEN - json web token   --> used for user varification
 install - npm i jsonwebtoken

 library - jsonwebtoken
 method - sign()     method used for generate jwt token

varify() -  used to varify jsonwebtoken

 TOKEN verification
 -------------------------
middlewares : 
    token verification is done by using middlewares
    middlewares have capacity to control server requests

  middlewares is a fn with 3 arguments  : request, response, next

  2 type of middlewares - 
            1. Application specific middlewares - work before all requests
            2. Router specific middlewares  - work which it is to be specifed in requests when it is needed



                                         
